AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cloudformation Template for the management account for the budget control
  solution
Parameters:
  S3MemberURL:
    Type: String
    Description: The S3 URL where the member account stack is stored.
  DeploymentType:
    Type: String
    Default: CENTRALIZED
    Description: Choose between CENTRALIZED and DECENTRALIZED approach for budget
      control.
    AllowedValues:
    - CENTRALIZED
    - DECENTRALIZED
  AccountList:
    Type: String
    AllowedPattern: ^"\d{12}"(,"\d{12}")*$|(^\s*)$
    Description: List of comma-separated and double-quoted account numbers to monitor.
      If you enter multiple secondary account IDs, you must also provide the primary
      account ID in this parameter.
  NotificationEmailAddress:
    Type: String
    Description: The email address to subscribe for SNS Budget Control solution alert
      messages,
  QuarantineOU:
    Type: String
    Description: Organization ID of the Quarantine OU
Conditions:
  SingleAccnt:
    Fn::Equals:
    - Ref: DeploymentType
    - CENTRALIZED
  MultiAccnt:
    Fn::Equals:
    - Ref: DeploymentType
    - DECENTRALIZED
Resources:
  BudgetActionNotificationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Join:
        - ''
        - - budget-action-notification-topic
          - Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
  BudgetEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: NotificationEmailAddress
      Protocol: email
      TopicArn:
        Ref: BudgetActionNotificationSnsTopic
  BudgetNotificationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Join:
        - ''
        - - budget-control-notification-topic
          - Fn::Select:
            - 2
            - Fn::Split:
              - /
              - Ref: AWS::StackId
      Subscription:
      - Protocol: lambda
        Endpoint:
          Fn::GetAtt:
          - BudgetControlSNSEventTarget
          - Arn
    Condition: SingleAccnt
  BudgetNotificationsnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: budgets.amazonaws.com
          Action:
          - SNS:Publish
          Resource:
            Ref: BudgetNotificationSnsTopic
      Topics:
      - Ref: BudgetNotificationSnsTopic
    Condition: SingleAccnt
  EventBusPermissionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - events:PutPermission
          - events:RemovePermission
          Resource:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':events:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :event-bus/default
  BudgetControlAWSOrganizationsPermissionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - organizations:ListParents
          - organizations:MoveAccount
          - organizations:DescribeOrganizationalUnit
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':organizations::'
              - Ref: AWS::AccountId
              - :account/o-*/*
          - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':organizations::'
              - Ref: AWS::AccountId
              - :ou/o-*/ou-*
  BudgetControlAWSBudgetsPermissionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - budgets:ViewBudget
          Resource:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':budgets::'
              - Ref: AWS::AccountId
              - :budget/*
  EventBusEstablishTrust:
    Type: AWS::Serverless::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import boto3
          import logging
          import json
          import cfnresponse

          client = boto3.client('events')
          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          def create_trust(accounts):
            for account in accounts:
                  response = client.put_permission(
                      Action= 'events:PutEvents',
                      Principal= account,
                      StatementId= 'limtr-{}'.format(account)
                  )

          def remove_trust(accounts):
              for account in accounts:
                  response = client.remove_permission(
                      StatementId= 'limtr-{}'.format(account))

          def create(properties, old_properties,physical_id):
              account_ids = properties["ACCOUNT_IDS"]
              account_ids = account_ids.replace("\"","")
              account_list = account_ids.split(",")
              if account_list:
                  logger.debug(account_list)
                  create_trust(account_list)
              return cfnresponse.SUCCESS, physical_id


          def update(properties, old_properties, physical_id):
              account_ids = properties["ACCOUNT_IDS"]
              account_ids = account_ids.replace("\"","")
              account_list = account_ids.split(",")
              old_account_ids = old_properties["ACCOUNT_IDS"]
              old_account_ids = old_account_ids.replace("\"","")
              old_account_list = old_account_ids.split(",")
              if account_list and old_account_list:
                  logger.debug(old_account_list)
                  remove_trust(old_account_list)
                  logger.debug(account_list)
                  create_trust(account_list)
              return cfnresponse.SUCCESS, physical_id


          def delete(properties, old_properties, physical_id):
              account_ids = properties["ACCOUNT_IDS"]
              account_ids = account_ids.replace("\"","")
              account_list = account_ids.split(",")
              if account_list:
                  remove_trust(account_list)
              return cfnresponse.SUCCESS, physical_id


          def handler(event, context):
              logger.info('Received event: %s' % json.dumps(event))
              status = cfnresponse.FAILED
              new_physical_id = None
              try:
                  properties = event.get('ResourceProperties')
                  old_properties = event.get('OldResourceProperties')
                  physical_id = event.get('PhysicalResourceId')
                  status, new_physical_id = {'Create': create, 'Update': update, 'Delete':
                                              delete}.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED,
                                                                                              None))(properties, old_properties, physical_id)
              except Exception as e:
                  logger.error('Exception:%s' % e)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, new_physical_id)

      Handler: establish_trust.handler
      Runtime: python3.8
      Description: Python Function to Establish trust for EventBridge cross-account
        events
      MemorySize: 128
      Timeout: 30
      Policies:
      - AWSLambdaBasicExecutionRole
      - AWSLambda_ReadOnlyAccess
      - Ref: EventBusPermissionPolicy
      Tracing: Active
    Condition: MultiAccnt
  EstablishTrust:
    Type: Custom::EventBusEstablishTrust
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - EventBusEstablishTrust
        - Arn
      ACCOUNT_IDS:
        Ref: AccountList
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Condition: MultiAccnt

  BudgetControlEventBridgeRuleTarget:
    Type: AWS::Serverless::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          logging.basicConfig(level=logging.DEBUG)
          logger = logging.getLogger(__name__)

          def process_budget_event(account_id, budget_config, dest_org_id, sns_topic):
            config_map = budget_config.split("#")
            if config_map:
              alert_type_config = config_map[3]
              if alert_type_config:
                logger.debug("Alert Type Config:{}".format(alert_type_config))
                alert_type = alert_type_config.split(":")[1].strip()
                logger.debug("Alert Type:{}".format(alert_type))
                if alert_type and alert_type in ["FORECASTED", "ACTUAL"]:
                  org_client = boto3.client("organizations")
                  source_org_id = org_client.list_parents(ChildId=account_id)[
                      "Parents"][0]["Id"]
                  logger.debug("Source-Org:{}".format(source_org_id))
                  if dest_org_id:
                    print(dest_org_id)
                    if source_org_id != dest_org_id:
                      response = org_client.move_account(
                          AccountId=account_id,
                          SourceParentId=source_org_id,
                          DestinationParentId=dest_org_id
                      )
                      logger.debug("Response: {}".format(response))

                      org = org_client.describe_organizational_unit(OrganizationalUnitId=source_org_id)
                      source_org_name = org['OrganizationalUnit']['Name']
                      org = org_client.describe_organizational_unit(OrganizationalUnitId=dest_org_id)
                      dest_org_name = org['OrganizationalUnit']['Name']
                      
                      sns_client = boto3.client("sns")
                      message = "Budget Threshold reached for account {}, the account has been moved from {} OU to the {} OU to prevent incurring additional charges".format(
                          account_id, source_org_name, dest_org_name)
                      subject = "Budget Control Solution action for account {}".format(
                          account_id)
                      sns_response = sns_client.publish(
                          TopicArn=sns_topic,
                          Message=message,
                          Subject=subject
                      )
                      logger.debug("Response: {}".format(sns_response))


          def lambda_handler(event, context):
              logger.setLevel(logging.DEBUG)
              logger.debug("Received:{}".format(event))
              status_code = "200"
              try:
                sns_topic = os.environ["SNS_TOPIC_ARN"]
                dest_org_id = os.environ["QUARANTINE_OU"]
                account_id = event["account"]
                
                logger.debug("Account id:{}".format(account_id))
                details = event["detail"]["message"]
                budget_config = details.split("##")[3]
                logger.debug("BudgetDetails:{}".format(budget_config))
                process_budget_event(account_id, budget_config, dest_org_id, sns_topic)
              except Exception as e:
                  logger.error(e)
                  status_code=500
              return {
                  'statusCode': status_code,
                  'body': json.dumps('Processed the EventBridge event')
              }


      Handler: budget_control_handler.lambda_handler
      Runtime: python3.8
      Description: Python function to handle eventbridge rule for budget control
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Ref: BudgetActionNotificationSnsTopic
          QUARANTINE_OU:
            Ref: QuarantineOU
      Policies:
      - AWSLambdaBasicExecutionRole
      - AWSLambda_ReadOnlyAccess
      - Ref: BudgetControlAWSOrganizationsPermissionPolicy
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::Join:
            - ''
            - - budget-action-notification-topic
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Tracing: Active
    Condition: MultiAccnt


  BudgetControlSNSEventTarget:
    Type: AWS::Serverless::Function
    Properties:
      Code:
        ZipFile: |
            import boto3
            import json
            import logging
            import os

            logging.basicConfig(level=logging.DEBUG)
            logger = logging.getLogger(__name__)

            def get_account_from_budget(account_id, budget_name):
              linked_account_ids = []
              client = boto3.client("budgets")
              response = client.describe_budget(AccountId=account_id, BudgetName=budget_name)
              if(response["Budget"]["CostFilters"]["LinkedAccount"]):
                linked_account_ids = response["Budget"]["CostFilters"]["LinkedAccount"]
              return linked_account_ids

            def check_and_alert_linked_accounts(linked_account_ids, account_list,dest_org_id,sns_topic):
              org_client = boto3.client("organizations")
              for linked_account in linked_account_ids :
                if linked_account in account_list:
                  source_org_id = org_client.list_parents(ChildId=linked_account)[
                      "Parents"][0]["Id"]
                  logger.debug("Source-Org:{}".format(source_org_id))
                  if dest_org_id:
                    logger.debug("Destination-Org:{}".format(dest_org_id))
                    if source_org_id != dest_org_id:
                      response = org_client.move_account(
                          AccountId=linked_account,
                          SourceParentId=source_org_id,
                          DestinationParentId=dest_org_id
                      )
                      logger.debug("Response: {}".format(response))

                      org = org_client.describe_organizational_unit(OrganizationalUnitId=source_org_id)
                      source_org_name = org['OrganizationalUnit']['Name']
                      org = org_client.describe_organizational_unit(OrganizationalUnitId=dest_org_id)
                      dest_org_name = org['OrganizationalUnit']['Name']
                      
                      sns_client = boto3.client("sns")
                      message = "Budget Threshold reached for account {}, the account has been moved from {} OU to the {} OU to prevent incurring additional charges".format(
                          linked_account, source_org_name, dest_org_name)
                      subject = "Budget Control Solution action for account {}".format(
                          linked_account)
                      sns_response = sns_client.publish(
                          TopicArn=sns_topic,
                          Message=message,
                          Subject=subject
                      )
                      logger.debug("Response: {}".format(sns_response))

            def process_budget_event(account_id, budget_config, dest_org_id, sns_topic, account_list):
              config_map = budget_config.split("#")
              if config_map:
                alert_type_config = config_map[3]
                budget_name_config = config_map[0]
                if alert_type_config:
                  logger.debug("Alert Type Config:{}".format(alert_type_config))
                  budget_name = budget_name_config.split(":")[1].strip()
                  alert_type = alert_type_config.split(":")[1].strip()
                  logger.debug("Alert Type:{}".format(alert_type))
                  if alert_type and alert_type in ["FORECASTED", "ACTUAL"]:
                    linked_account_ids = get_account_from_budget(account_id,budget_name)
                    logger.debug("LinkedAccount IDs:{}".format(linked_account_ids))
                    check_and_alert_linked_accounts(linked_account_ids, account_list,dest_org_id,sns_topic)
              
            def lambda_handler(event, context):
                logger.setLevel(logging.DEBUG)
                logger.debug("Received:{}".format(event))
                status_code = "200"
                try:
                  sns_topic = os.environ["SNS_TOPIC_ARN"]
                  dest_org_id = os.environ["QUARANTINE_OU"]
                  account_list = os.environ["ACCOUNT_IDS"]
                  message = event['Records'][0]['Sns']['Message']
                  logger.debug("From SNS: " + message)

                  details = message.replace("\n","#")
                  logger.debug(details)
                  budget_details = details.split("##")
                  account_id = ((budget_details[0]).split("#")[1]).split(" ")[2]
                  logger.debug("Account id:{}".format(account_id))
                  budget_config = budget_details[3]
                  logger.debug("BudgetDetails:{}".format(budget_config))
                  process_budget_event(account_id, budget_config, dest_org_id, sns_topic,account_list)
                except Exception as e:
                    logger.error(e)
                    status_code=500
                return {
                    'statusCode': status_code,
                    'body': json.dumps('Processed the EventBridge event')
                }



      Handler: budget_control_management_sns_handler.lambda_handler
      Runtime: python3.8
      Description: Python function to handle eventbridge rule for budget control
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Ref: BudgetActionNotificationSnsTopic
          QUARANTINE_OU:
            Ref: QuarantineOU
          ACCOUNT_IDS:
            Ref: AccountList
      Policies:
      - AWSLambdaBasicExecutionRole
      - AWSLambda_ReadOnlyAccess
      - Ref: BudgetControlAWSBudgetsPermissionPolicy
      - Ref: BudgetControlAWSOrganizationsPermissionPolicy
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::Join:
            - ''
            - - budget-action-notification-topic
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Tracing: Active
    Condition: SingleAccnt
  BudgetControlSNSTargetInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - BudgetControlSNSEventTarget
        - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: BudgetNotificationSnsTopic
    Condition: SingleAccnt
  BudgetControlEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        Fn::Join:
        - ''
        - - '{"account":['
          - Fn::If:
            - SingleAccnt
            - Fn::Join:
              - ''
              - - '"'
                - Ref: AWS::AccountId
                - '"'
            - Ref: AccountList
          - '],'
          - '"source":["budget-control-solution"],'
          - '"detail-type":["Budget Threshold Breached"]'
          - '}'
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - BudgetControlEventBridgeRuleTarget
          - Arn
        Id: BudgetControlLambdaTarget
    Condition: MultiAccnt
  BudgetControlEventBridgeRuleTargetInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - BudgetControlEventBridgeRuleTarget
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - BudgetControlEventBridgeRule
        - Arn
    Condition: MultiAccnt
  DecentralizedModelMemberAccountStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      Capabilities:
      - CAPABILITY_IAM
      - CAPABILITY_NAMED_IAM
      PermissionModel: SERVICE_MANAGED
      StackSetName: !Sub 'MemberAccountStackSet-${AWS::StackName}'
      TemplateURL: !Ref S3MemberURL 
    Condition: MultiAccnt
Outputs:
  BudgetNotificationSnsTopic:
    Description: AWS SNS Topic for notification of AWS Budgets alerts
    Value:
      Ref: BudgetNotificationSnsTopic
    Condition: SingleAccnt
